#BlueJ class context
comment0.target=Line
comment0.text=\n\ The\ class\ Line\ is\ in\ charge\ of\ the\ Line\ object\ and\ its\ contents\ (such\ as\ the\ arrays.)\ \n\n\ Alex\ Lai\n\ Wednesday,\ November\ 27\ 2019\n
comment1.params=size\ name
comment1.target=Line(int,\ java.lang.String)
comment1.text=\n\ For\ every\ line\ object,\ we\ have\ an\ array\ of\ Strings,\ the\ size\ of\ number\ of\ stations.\n\ setName\ will\ use\ the\ setter\ to\ set\ the\ name,\ and\ the\ constructor\ will\ set\ the\ size\ of\ the\ array.\n
comment2.params=station
comment2.target=void\ addStation(java.lang.String)
comment2.text=\n\ This\ method\ adds\ a\ station\ to\ the\ array\ inside\ the\ Line\ object.\ A\ loop\ in\ TransitSystem\ takes\ care\ of\ the\ increment.\n\ @param\ station\ -\ the\ Transit\ station.\n
comment3.params=station
comment3.target=boolean\ hasStation(java.lang.String)
comment3.text=\n\ The\ hasStation\ method\ returns\ a\ boolean\n\ @param\ station\ -\ the\ Transit\ station.\n
comment4.params=
comment4.target=java.lang.String[]\ getStations()
comment4.text=\n\ getStations\ is\ a\ getter\ method.\n\ @return\ -\ the\ array\ of\ Stations\ in\ a\ line.\n
comment5.params=startLine\ endLine
comment5.target=java.lang.String\ findTransfer(java.lang.String[],\ java.lang.String[])
comment5.text=\n\ findTransfer\ finds\ a\ station\ where\ the\ user\ can\ transfer\ to.\ It\ works\ in\ transit\ with\ the\ findEndLine\ method\n\ which\ comes\ after\ this\ to\ check\ the\ order.\n\ @param\ startLine\ -\ array\ with\ that\ contains\ the\ starting\ station.\n\ @param\ endLine\ -\ array\ that\ contains\ the\ destination\ station.\n\ @return\ -\ the\ canidate\ station\ that\ can\ be\ transferred\ to.\n
comment6.params=endStation\ transfer\ endLine
comment6.target=boolean\ findEndLine(java.lang.String,\ java.lang.String,\ java.lang.String[])
comment6.text=\n\ findEndLine\ is\ a\ method\ only\ used\ when\ the\ destination\ has\ a\ transfer\ to\ another\ station.\ It\ \n\ makes\ sure\ the\ user\ can\ only\ transfer\ if\ they\ go\ forward\ in\ the\ lines\ by\ comparing\ the\ indexes.\n\ @param\ endStation\ -\ The\ destination\ the\ user\ desires.\n\ @param\ transfer\ -\ The\ station\ that\ the\ user\ has\ to\ transfer\ to\ if\ they\ want\ to\ reach\ their\ destination.\n\ @param\ endLine\ -\ The\ line\ that\ contains\ the\ endStation.\n\ @return\ -\ true\ if\ the\ the\ user\ cant\ transfer\ to\ a\ station\ in\ front\ of\ them,\ false\ if\ the\ station\ they\ want\ to\ transfer\ to\ is\ behind\ them.\n
comment7.params=
comment7.target=java.lang.String\ getName()
comment7.text=\n\ Getter\ that\ retrieves\ a\ line\ name.\n\ @return\ \n
comment8.params=n
comment8.target=void\ setName(java.lang.String)
comment8.text=\n\ Setter\ that\ sets\ the\ line\ name\n\ @param\ n\ Name\ of\ the\ line,\ which\ comes\ from\ the\ file.\n
numComments=9
